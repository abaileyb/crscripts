#!/usr/bin/python3

import multiprocessing
import ntpath
import os
import re
import shlex
import subprocess
import sys
import util

from optparse import OptionParser

(options, args) = util.get_options_and_args()

def print_rebuild_warning():
  print("If this isn't what you expected, consider re-building unit tests. " + \
      "That would be 'crbuild --tests_only'")

def find_all_test_targets():
  global options
  sys.stdout.write("Looking for test targets... ")
  sys.stdout.flush()
  os.chdir(util.get_chromium_src_dir())
  all_targets = subprocess.check_output(shlex.split(
      "gn ls out/Default")).decode("utf-8").split("\n")
  # Remove the leading "//"
  all_test_targets = sorted([t[2:] for t in all_targets if t.endswith("_unittests")])
  sys.stdout.write("" + str(len(all_test_targets)) + " targets.")
  print("")
  if options.verbose:
    for t in all_test_targets:
      print("\t" + t)
  return all_test_targets

if len(args) < 1:
  print("I need the name of a test as an argument, e.g. 'base_unittests'.")
  print("For a list of all I know about, try 'crtest list'")
  sys.exit(1)

target = args[0]
list_only = (target == "list")

HOME = os.path.expanduser("~")
TEST_USER_PROFILE_PATH = os.path.join(HOME, "tmp", "test-chromium")
# Even though our target OS isn't necessarily actually Chrome OS, adding this
# gives access to more build targets.
gn_args = util.common_gn_args() + [
  'target_os = "chromeos"',
]

if options.dryrun:
  print("Dry run, not actually running any tests.\n")

all_test_targets = find_all_test_targets()
os.chdir(os.path.join(HOME, "chromium", "src"))

camel_case = (target != target.lower())
if camel_case:
  if not target.endswith("Test"):
    print("(Note: correcting '" + target + "' into " + target + "Test)")
    target = target + "Test"
  sys.stdout.write("Looking for test files... ")
  sys.stdout.flush()
  all_test_files = sorted(subprocess.check_output(shlex.split(
      'find . -name "*test.cc" -not -path "./third_party/*" -not -path "./out/*" -print'))\
      .decode("utf-8").split("\n"))
  sys.stdout.write("" + str(len(all_test_files)) + " files.\n")
  print("")

  matching_test_file = ""
  for f in all_test_files:
    if not os.path.exists(f):
      continue
    if "class " + target in open(f, "r").read():
      matching_test_file = f

  if matching_test_file == "":
      print("I didn't find any matching test files.")
  else:
    print("" + target + " is defined in " + matching_test_file)

# Now let's try to infere the test target(s).
test_targets = set()
if camel_case and matching_test_file != "":
  # If the user gave us a camel-cased test name, we just want to find the one
  # target that best matches that. Looking for decreasing sub-paths of the test 
  # file path.
  els = matching_test_file.split("/")
  path_length = len(els) - 1
  while (path_length > 1):
    query = "/".join(els[1:path_length])
    for t in all_test_targets:
      if query + "_unittests" in t:
        test_targets = [t]
        break
    path_length -= 1
else:
  for t in all_test_targets:
    # Targets are something like path/to/directory:actual_target_unittests
    parts = t.split("/")
    parts = parts[:-1] + parts[-1].split(":")
    if (("_" in target or "/" in target) and target in t) \
        or target in parts \
        or target + "_unittests" in parts:
      test_targets.add(t)

if len(test_targets) == 0:
  print("Sorry, I didn't find any matching targets. Aborting. ")
  print_rebuild_warning()
  sys.exit(0)

print("\nI'm going to run these test targets:")
for t in test_targets:
  print("\t" + t)
print("")
print_rebuild_warning()

cmd = "gn gen out/Default --args='" + " ".join(gn_args) + "'"
util.run(cmd, "Preparing to build...", options)

# TODO: Run goma if it's not running.
if not util.is_process_running("compiler_proxy"):
  util.show_goma_warning()

cmd = ("autoninja -C out/Default " + " ".join(test_targets))
status_code = util.run(cmd, "Compiling, this may take a while...", options)
if status_code != 0:
  print("Compilation failed, aborting.")
  sys.exit(status_code)

# TODO: Also use --gtest_filter="*pattern*"
for t in test_targets:
  cmd = "./out/Default/" + \
      (t.split(":")[1] if ":" in t else t) + \
      (' --gtest_filter="*' + target + '*"' if camel_case else "")
  if options.verbose:
    print(cmd)
  if not options.dryrun:
    os.system(cmd)
