#!/usr/bin/python3

import os
import re
import subprocess
import sys
import util

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-l", "--login-manager", dest="loginmanager",
                  action="store_true",
                  help="use the login manager so that the out-of-box " + \
                       "experience is included")

(options, args) = util.get_options_and_args(parser)

config = util.read_config_from_file()

# TODO: hide compilation output.

HOME = os.path.expanduser("~")
GOMA_DIR = os.path.join(HOME, "goma")
TEST_USER_PROFILE_PATH = os.path.join(HOME, "tmp", "test-sandbox")
gn_args = util.common_gn_args() + [
  'target_os = "chromeos"',
  'is_component_build = true',
]
if util.is_google_machine():
  gn_args.append('use_goma = true')
  gn_args.append('goma_dir="' + GOMA_DIR  + '"')
else:
  gn_args.append('use_goma = false')

util.ensure_goma_installed()

os.chdir(os.path.join(HOME, "chromium", "src"))
cmd = "gn gen out/Default --args='" + " ".join(gn_args) + "'"
status_code = util.run(cmd, "Preparing to build...", options)
if status_code != 0:
  print("gn step failed, aborting.")
  sys.exit(status_code)

# TODO: Run goma if it's not running.
if not util.is_process_running("compiler_proxy"):
  util.show_goma_warning()

cmd = ("autoninja -C out/Default chrome chrome_sandbox")
status_code = util.run(cmd, "Compiling, this may take a while", options)
if status_code != 0:
  print("Compilation failed, aborting.")
  if not options.verbose:
    print("Please use -v to see failures.")
  sys.exit(status_code)

sbin_target = "/usr/local/sbin/chrome-devel-sandbox"
if not os.path.exists(sbin_target):
  os.system("sudo cp out/Default/chrome_sandbox " + sbin_target)
  os.system("sudo chown root:root /usr/local/sbin/chrome-devel-sandbox")
  os.system("sudo chmod 4755 /usr/local/sbin/chrome-devel-sandbox")

#TODO: Make the data dir configurable
cmd = "out/Default/chrome --user-data-dir=" + TEST_USER_PROFILE_PATH + \
    (" --login-manager" if options.loginmanager else "") + \
    (" " + config["extra_flags"] if "extra_flags" in config else "") + \
    (" --enable-features=" + ",".join(config["enabled_features"].split(",")) if "enabled_features" in config else "")
util.run(cmd, "Running chrome, a new window will open...", options)
