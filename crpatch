#!/usr/bin/python3

import os
import shlex
import subprocess
import sys
import util

if len(sys.argv) < 2:
  print("I need a CL number as an argument.")
  sys.exit(1)

cl = int(sys.argv[1])
latest_revision = util.get_last_revision_number_for_cl(cl)

url = "https://chromium-review.googlesource.com/changes/" + \
    str(cl) + "/revisions/" + str(latest_revision) + "/patch?zip"

current_branch = subprocess.check_output(shlex.split(
    "git rev-parse --abbrev-ref HEAD")).decode().strip()
if current_branch == "master":
  new_branch = "patch_" + str(cl)
  print("The current branch is master, creating branch '" + new_branch + "'...")
  # TODO: Stop if branching out fails.
  os.system("git checkout -b " + new_branch)

print("Downloading patch...")
os.chdir(util.get_chromium_src_dir())
files_before = os.listdir(".")
unzipped = "patch_" + str(cl) + ".diff"
zip = "patch.zip"
os.system("curl '" + url + "' > " + zip)

current_branch = subprocess.check_output(shlex.split(
  "git rev-parse --abbrev-ref HEAD")).decode("utf-8").strip()
if current_branch == "master":
  print("\nWarning: you are on the master branch. You might want to git checkout -b before committing anything.\n")

# The URL doesn't let us know what the patch file will be called, so we'll just 
# diff the contents of the directory.
files_before = os.listdir(".")
os.system("unzip " + zip)
files_after = os.listdir(".")
for f in files_after:
  if f not in files_before and f.endswith(".diff"):
    unzipped = f
    break
print("Applying '" + unzipped  + "'...")
os.system("patch -p1 < " + unzipped)
print("Cleaning up...")
os.system("rm " + zip + " " + unzipped)

print("Committing changes locally...")
os.system("git commit -a -m 'Applying patch " + str(cl) + "'")
print("Calling 'git cl issue'...")
os.system("git cl issue " + str(cl))
