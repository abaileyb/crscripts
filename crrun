#!/usr/bin/python

import multiprocessing
import os
import re
import subprocess
import sys

def is_process_running(process):
  s = subprocess.Popen(["ps", "axw"], stdout=subprocess.PIPE)
  for x in s.stdout:
    if re.search(process, x.decode()):
      return True
    return False

# TODO: hide compilation output, provide verbose flag.

HOME = os.path.expanduser("~")
GOMA_DIR = os.path.join(HOME, "goma")
TEST_USER_PROFILE_PATH = os.path.join(HOME, "throwaway", "test-sandbox")
GN_ARGS = ("target_os = \"chromeos\""
          "is_component_build = true "
          "enable_nacl = false "
          "use_goma = true "
          "goma_dir=\"" + GOMA_DIR  + "\"")

n_cpus = multiprocessing.cpu_count()
# Leave one CPU so that we don't bring the machine completely to its knees...
n_threads = max(1, n_cpus - 1)

print("Running gn gen...")
os.system("gn gen out_cros/Release --args='" + GN_ARGS + "'")

# TODO: Run goma if it's not running.
if not is_process_running("compiler_proxy"):
  print("Warning: goma is not running, the build will be slower")
print("Compiling, this might take a while...")
os.system("ninja -C out_cros/Release -j" + str(n_threads) +
          " chrome chrome_sandbox")

sbin_target = "/usr/local/sbin/chrome-devel-sandbox"
if not os.path.exists(sbin_target):
  os.system("sudo cp out_cros/Release/chrome_sandbox " + sbin_target)
  os.system("sudo chown root:root /usr/local/sbin/chrome-devel-sandbox")
  os.system("sudo chmod 4755 /usr/local/sbin/chrome-devel-sandbox")

#TODO: Make those configurable
os.system("out_cros/Release/chrome --user-data-dir=" + TEST_USER_PROFILE_PATH)
